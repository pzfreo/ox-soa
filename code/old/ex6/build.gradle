// this section allows us to add third-party plugins 
// that we may need in later exercises
plugins {
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
// Jetty plugin required for running tests (and for future exercises)
apply plugin: 'jetty'

// where to download libraries, plugins etc
repositories {
    jcenter()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.glassfish.jersey.core:jersey-client:2.23'
	   
    compile 'org.glassfish.jersey.core:jersey-server:2.23'            
	compile 'org.glassfish.jersey.containers:jersey-container-jetty-servlet:2.23'
	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.6'
    compile 'org.eclipse.jetty:jetty-server:9.1.1.v20140108'
	compile 'org.eclipse.jetty:jetty-util:9.1.1.v20140108'	
	compile 'org.eclipse.jetty:jetty-servlet:9.1.1.v20140108'	
    
}


// setup for Jetty
jettyRun.contextPath = '/'
jettyRun.httpPort = 8080
// jetty needs to be stopped asynchronously. To make this happen we use the stop port
jettyRun.stopPort = 8091
jettyRun.stopKey = 'stopKey'
jettyStop.stopPort = 8091   // Port for stop signal
jettyStop.stopKey = 'stopKey'


// before running tests start Jetty
test.doFirst {
  // start Jetty in the background
  jettyRun.daemon = true
  tasks.jettyRun.execute()
  
}

// after tests stop Jetty
test.finalizedBy {
    tasks.jettyStop.execute()
}

// workaround for https://issues.gradle.org/browse/GRADLE-2263
// will not be required after Gradle 3.0 is embedded in Gradle plugin
import org.gradle.api.plugins.jetty.internal.Monitor
[jettyRun, jettyRunWar]*.doLast {
   if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
      Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
      monitor.start();
   }
}
